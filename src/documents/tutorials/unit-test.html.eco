---
layout: single-doc
title: Unit Tests.
type: general
category: Tutorial
description: Write browser-based JavaScript tests to easily ensure code functionality through unit testing.
---

<h4>1. Copy and paste</h4>

<pre><code class="html">&lt;script src="<%= @getCdnSeed() %>"&gt;&lt;/script&gt;</code></pre>

<p>This ultra-small bit of JavaScript gives us access to all AlloyUI modules. You are going to need this.</p>

<hr>

<h4>2. Getting started!</h4>

<p>Let's create a YUI instance and load the <code>test</code> module to begin.</p>

<pre><code class="javascript">YUI.use(
    'test',
    function(Y) {
        // Test cases are written here
    }
);</code></pre>

<hr>

<h4>3. Writing Test Cases</h4>

<p>Create a <code>TestCase</code> object with <code>Y.Test.Case</code> constructor and pass it an object with individual test cases. Keep in mind that each test should test a specific piece of functional code.</p>

<p>Test methods can be named using the traditional manner of prepending the word <em>test</em> to the method name, or using a "friendly name," which is a sentence containing at least one space that describes the test's purpose.</p>

<pre><code class="javascript">var yourTestCase = new Y.Test.Case(
    {
        name: "TestCase Name",

        // ------ Tests ------
        testSomething: function() {
            // code goes here
        },

        "something should is going to be tested here": function() {
            // code goes here
        }
    }
);</code></pre>

<h4>setUp() and tearDown()</h4>

<p>Sometimes it is necessary to setup information before a test is run and clean up the information after the test is run. The <code>setUp()</code> method is run before each and every test in the test case and likewise the <code>tearDown()</code> method is run after each test is run. </p>

<pre><code class="javascript">var yourTestCase = new Y.Test.Case(
    {
        name: "TestCase Name",

        // ------ Setup and Tear Down ------
        setUp: function() {
            // initialize data to be used in each test
        },

        tearDown: function() {
            // remove data after each test
        },

        // ------ Tests ------
        testSomething: function() {
            // code goes here
        },

        "something should is going to be tested here": function() {
            // code goes here
        }
    }
);</code></pre>

<h4>Assertions</h4>

<p>We now have the basic structure of a test, but have not actually tested anything. Assertions allow us to check the validity of a particular action or function. In general, they accept a test condition and an optional message to display if the test fails.</p>

<p>There are many types of assertions available, all of which can be found at <a href="http://yuilibrary.com/yui/docs/test/#assertions" target="_blank">http://yuilibrary.com/yui/docs/test/#assertions</a>. But for now, we will just look at some of the basics.</p>

<pre><code class="javascript">var carsTestCase = new Y.Test.Case(
    {
        name: "Cars Test",

        setUp: function() {
            this.car = {
                color: ['red', 'black', 'silver', 'white'],
                make: "Toyota",
                model: 'Camry',
                year: 2013
            };
        },

        tearDown: function() {
            delete this.car;
        },

        'car colors should be listed in an array' function() {
            Y.Assert.isArray(this.car.color);
        },

        testCarMake: function() {
            Y.Assert.isEqual("Toyota", this.car.make, "The car make should be 'Toyota'");
        },

        testCarModel: function () {
            Y.assert("Camry" == this.car.model, "Model should be 'Camry'");
        },

        'year should be a number': function() {
            Y.Assert.isNumber(this.car.year, "Year should be a number");
        }
    }
);</code></pre>

<p>Great! Now that we have a <code>TestCase</code> set up, we can add it to a <code>TestSuite</code>.</p>

<hr>

<h4>4. Test Suites</h4>

<p>If we are testing a large application that requires many test cases, a <code>TestSuite</code> allows us to organize a collection of <code>TestCase</code> together. Initializing <code>TestSuite</code> and adding <code>TestCase</code> to them is easy.</p>

<pre><code class="javascript">var suite = new Y.Test.Suite("Name of Your TestSuite");

suite.add(
    new Y.TestCase(
        {
            // code goes here
        }
    )
);

// Adding carsTestCase to the testSuite:
suite.add(carsTestCase);</code></pre>

<p>Multiple <code>TestSuite</code> can also be organized together into a parent <code>TestSuite</code> in the same way.</p>

<hr>

<h4>5. Running Tests</h4>

<p>Congratulations! You now have all the tools to write a unit test. All we have to do is run it!</p>

<pre><code class="javascript">Y.Test.Runner.add(suite);

Y.Test.Runner.run();</code></pre>

<hr>

<p>For more information about writing unit tests, checkout out <a href="http://yuilibrary.com/yui/docs/test/" target="_blank">YUI's test</a> documentation.</p>